#!/usr/bin/python3
#coding: utf-8

"""
Desenvolvido por Patrick Rogger Garcia
Data: 13-08-2018
"""

import sys
import os

if len(sys.argv) == 2:
    if (sys.argv[1] == 'help') or (sys.argv[1] == '--help') or (sys.argv[1] == 'h') or (sys.argv[1] == '-help'):
        print('USE: rhoplusGUI file_Jformat_in.dat file_Jformat_out.dat')
        print('     rhoplusGUI file_Jformat_in.dat')
        sys.exit()

try:
    from kivy.app import App
except ModuleNotFoundError:
    print('')
    print('Need to install kivy package')
    print('Type in terminal:')
    print('      sudo apt-get install python-kivy')
    print('      sudo apt-get install python3-kivy')
    print('')
    print('If the Ubuntu version is 17 or 18, type:')
    print('      sudo add-apt-repository ppa:kivy-team/kivy-daily')
    print('      sudo apt-get update')
    print('      sudo apt-get install python-kivy')
    print('      sudo apt-get install python3-kivy')
    print('')
    print('Please visit: https://kivy.org/docs/installation/installation-linux.html')
    print('')
    print('If you see the error [CRITICAL] window, install:')
    print('      sudo apt install python3-dev libsdl2{,-image,-mixer,-ttf}-dev')
    print('')
    sys.exit()

from kivy.core.window import Window
from kivy.lang import Builder

from kivy.graphics import Color, Line, Rectangle

from kivy.uix.boxlayout import BoxLayout
from kivy.uix.floatlayout import FloatLayout

from kivy.uix.label import Label
from kivy.uix.popup import Popup
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput

from math import log10, sqrt
from subprocess import getoutput
import threading

code_kivy = """
#: import o os

<LabelRot@Label>
    canvas.before:
        PushMatrix
        Rotate:
            angle: 90
            origin: self.center
    canvas.after:
        PopMatrix

<LabelWhite@Label>:
    canvas.before:
        Color: 
            rgba: 1., 1., 1., 1.
        Rectangle:
            size: self.size
            pos: self.pos
         
       
<Screen>:
    orientation: 'vertical'       
    
    LabelWhite:
        size_hint_y: None
        height: 1
    
    BoxLayout:
        orientation: 'horizontal'
        
        LabelWhite:
            size_hint_x: None
            width: 1
            
        BoxLayout:
            size_hint_y: None
            height: 590
            id: lay_center
            
            FileChooserListView:
                rootpath: o.environ['HOME']
                path: o.getcwd()
                id: dir
                filters: ['*.dat']
                on_submit: root.on_press_ok(dir.path, dir.selection)
        
        LabelWhite:
            size_hint_x: None
            width: 1
    
    LabelWhite:
        size_hint_y: None
        height: 1
    
    Label:
        canvas.before:
            Color:
                rgba: .2, .2, .2, 1.
            Rectangle:
                size: self.size
                pos: self.pos
        size_hint_y: None
        height: 5
    
    BoxLayout:
        spacing: 5
        canvas.before:
            Color:
                rgba: .2, .2, .2, 1.
            Rectangle:
                size: self.size
                pos: self.pos
        size_hint_y: None
        height: 35
            
        Label:
            text: dir.path
            id: log
        
        BoxLayout:
            orientation: 'vertical'
            size_hint_x: None
            width: 130
            id: box_bt_ok
            
            LabelWhite:
                size_hint_y: None
                height: 1
                
            BoxLayout:
        
                LabelWhite:
                    size_hint_x: None
                    width: 1
                    
                Button:
                    background_normal: ''
                    background_color: 0., 0., 0., 1.
                    text: 'OK'
                    id: bt_ok            
                    on_press: root.on_press_ok(dir.path, dir.selection)
                    
                LabelWhite:
                    size_hint_x: None
                    width: 1
                    
            LabelWhite:
                size_hint_y: None
                height: 1
        
        BoxLayout:
            orientation: 'vertical'
            size_hint_x: None
            width: 130
        
            LabelWhite:
                size_hint_y: None
                height: 1
        
            BoxLayout:
        
                LabelWhite:
                    size_hint_x: None
                    width: 1
        
                Button:
                    background_normal: ''
                    background_color: 0., 0., 0., 1.
                    text: 'Export Figure'
                    on_press: root.on_press_export()
                    
                LabelWhite:
                    size_hint_x: None
                    width: 1
        
            LabelWhite:
                size_hint_y: None
                height: 1
        
        BoxLayout:
            orientation: 'vertical'
            size_hint_x: None
            width: 130
        
            LabelWhite:
                size_hint_y: None
                height: 1
        
            BoxLayout:
        
                LabelWhite:
                    size_hint_x: None
                    width: 1
        
                Button:
                    background_normal: ''
                    background_color: 0., 0., 0., 1.
                    text: 'Merge rsp-dat'
                    on_press: root.on_press_merge()
                    
                LabelWhite:
                    size_hint_x: None
                    width: 1
        
            LabelWhite:
                size_hint_y: None
                height: 1
        
        BoxLayout:
            orientation: 'vertical'
            size_hint_x: None
            width: 130
        
            LabelWhite:
                size_hint_y: None
                height: 1
        
            BoxLayout:
        
                LabelWhite:
                    size_hint_x: None
                    width: 1
        
                Button:
                    background_normal: ''
                    background_color: 0., 0., 0., 1.
                    text: 'Plot'
                    on_press: root.on_press_plot()
                                
                LabelWhite:
                    size_hint_x: None
                    width: 1
            
            LabelWhite:
                size_hint_y: None
                height: 1
                
        BoxLayout:
            orientation: 'vertical'
            size_hint_x: None
            width: 130
            
            LabelWhite:
                size_hint_y: None
                height: 1
            
            BoxLayout:
            
                LabelWhite:
                    size_hint_x: None
                    width: 1
            
                Button:
                    background_normal: ''
                    background_color: 0., 0., 0., 1.
                    text: 'Rho+'
                    on_press: root.on_press_rho()
                      
                LabelWhite:
                    size_hint_x: None
                    width: 1
            
            LabelWhite:
                size_hint_y: None
                height: 1
        
        Label:
            size_hint_x: None
            width: 5
    Label:
        size_hint_y: None
        height: 5
        canvas.before:
            Color:
                rgba: .2, .2, .2, 1.
            Rectangle:
                size: self.size
                pos: self.pos  
"""

Builder.load_string(code_kivy)

def mod(x):
    x_2 = x**2
    return sqrt(x_2)


class LabelRot(Label):
    pass


class PointPlot(Button):
    cor = []
    cor_no = [0, 0, 0, .2]
    active = False
    active_n = 0
    n = -1

    def __init__(self, **kwargs):
        super(PointPlot, self).__init__(**kwargs)

        self.background_normal = ' '
        self.size_hint = None, None
        self.border = [0, 0, 0, 0]
        self.height = 6
        self.width = 6
        self.background_color = self.cor_no
        self.on_press = self.select

    def select(self):
        self.background_color = self.cor
        self.on_press = self.no_select
        self.active = True
        self.active_n = 1
        print('active: ' + str(self.active))

    def no_select(self):
        self.background_color = self.cor_no
        self.on_press = self.select
        self.active = False
        self.active_n = 0
        print('active: ' + str(self.active))


class Screen(BoxLayout):

    not_argv = True

    dict_points = {}
    first_press_up = True

    draw_line = False


    lim_phi = 90

    x0_plotxy = 60
    x0_plotyx = 645

    def __init__(self, **kwargs):
        super(Screen, self).__init__(**kwargs)

        self.bind(on_touch_down=self.on)
        self.bind(on_touch_up=self.up)
        self.bind(on_touch_move=self.move)

        if len(sys.argv) == 1:
            pass
        else:
            self.ids.lay_center.clear_widgets()
            self.site = sys.argv[1].replace('.dat', '')
            self.ids.log.text = os.getcwd()
            self.on_press_ok('', [])

    # ----------------------------------- Cursor e selecao dos Pontos -----------------------------------
    pos_i = ()
    pos_f = ()
    pos_i_x = 0
    pos_i_y = 0
    size_x = 0
    size_y = 0

    def on(self, intancia, value):

        self.pos_i = value.pos
        self.pos_i_x = value.pos[0]
        self.pos_i_y = value.pos[1]

    def up(self, instancia, value):

        if self.first_press_up:
            pass
        else:
            self.pos_f = value.pos
            self.ids.lay_center.canvas.before.clear()
            self.ids.lay_center.canvas.before.add(Rectangle(pos=self.pos, size=self.size))
            self.ids.lay_center.canvas.before.add(Color(rgba=[0, 0, 0, 1]))

            if (mod(self.size_x) > 5) or (mod(self.size_y) > 5):

                for i in self.dict_points.keys():
                    pos_x = self.dict_points[i].x
                    pos_y = self.dict_points[i].y

                    coor_i_x = [self.pos_i_x, self.pos_i_x - self.size_x]

                    coor_x = sorted(coor_i_x)

                    coor_i_y = [self.pos_i_y, self.pos_i_y - self.size_y]
                    coor_y = sorted(coor_i_y)


                    if ((pos_x > coor_x[0]) and (pos_x < coor_x[1]) and (pos_y > coor_y[0]) and (pos_y < coor_y[1])):

                        if self.dict_points[i].active == False:
                            self.dict_points[i].select()
                        else:
                            self.dict_points[i].no_select()

        self.size_x = 0
        self.size_y = 0

    def move(self, instancia, value):

        self.size_x = self.pos_i_x - value.pos[0]
        self.size_y = self.pos_i_y - value.pos[1]

        if (mod(self.size_x) > 5) or (mod(self.size_y) > 5):

            self.ids.lay_center.canvas.before.clear()
            self.ids.lay_center.canvas.before.add(Rectangle(pos=self.pos, size=self.size))
            self.ids.lay_center.canvas.before.add(Color(rgba=[0, 0, 0, 1]))
            self.ids.lay_center.canvas.before.add(Color(rgba=[0, 0, 0, .2]))
            self.ids.lay_center.canvas.before.add(Rectangle(pos=(self.pos_i_x, self.pos_i_y), size=(-self.size_x, -self.size_y)))
    # ----------------------------------------------------------------------------------------------------

    # ------------- Funcoes ao Clicar os Botoes: OK, Export Figure, Merge rsp-dat, Plot, Rhoplus----------
    def on_press_ok(self, path_site, list_file_select):

        self.first_press_up = False

        if self.not_argv == True and len(sys.argv) == 1:

            self.file_select_dat = os.path.basename(list_file_select[0])
            self.site = self.file_select_dat.replace('.dat', '')
            os.chdir(path_site.replace('/' + self.file_select_dat, ''))
            self.ids.log.text = os.getcwd()
            self.not_argv = False
            self.ids.lay_center.clear_widgets()

        if os.path.basename(os.getcwd()) == self.site:
            pass
        else:
            if os.path.isdir(self.site):
                pass
            else:
                os.mkdir(self.site)

        if os.path.basename(os.getcwd()) == self.site:
            pass

        else:
            if (os.path.isfile(self.site + '/xy_' + self.site + '_NM') == True) and (os.path.isfile(self.site + '/xy_' + self.site + '_NM') == True):
                print('/xy_' + self.site + '_NM: already exists \n/yx_' + self.site + '_NM: already exists')
            else:
                os.system('./processo ' + self.site)
            os.chdir(self.site)
            self.ids.log.text = os.getcwd()
            os.system('rhoplus < xy_' + self.site + '_NM')
            os.system('rhoplus < yx_' + self.site + '_NM')

    def on_press_export(self):

        self.pop_save = Popup(title='Save')
        self.pop_save.size_hint = None, None
        self.pop_save.pos = 700, 200
        self.pop_save.height = 120
        self.pop_save.width = 300
        box_pop = BoxLayout()
        box_pop.orientation = 'vertical'
        self.tb_save = TextInput()

        self.tb_save.on_text_validate = self.save_export
        self.tb_save.multiline = False
        bt_save = Button(text='Save')
        bt_save.on_press = self.save_export
        box_pop.add_widget(self.tb_save)
        box_pop.add_widget(bt_save)

        try:
            self.tb_save.text = self.site + '.png'
            self.pop_save.content = box_pop
            self.pop_save.open()
        except AttributeError:
            self.pop_save.title = 'Select Site'
            self.pop_save.height = 60
            self.pop_save.open()

    def on_press_merge(self):

        if len(sys.argv) == 3:
            self.exec_merge()
        else:
            self.pop_merge = Popup(title='Save .dat')
            self.pop_merge.size_hint = None, None
            self.pop_merge.height = 120
            self.pop_merge.width = 300
            box_pop = BoxLayout()
            box_pop.orientation = 'vertical'
            self.tb_merge = TextInput()

            self.tb_merge.on_text_validate = self.exec_merge
            self.tb_merge.multiline = False
            bt_save = Button(text='Merge')
            bt_save.on_press = self.exec_merge
            try:
                self.tb_merge.text = self.site + '.dat'
                box_pop.add_widget(self.tb_merge)
                box_pop.add_widget(bt_save)
                self.pop_merge.content = box_pop
                self.pop_merge.open()

            except AttributeError:
                self.pop_merge.title = 'Select Site'
                self.pop_merge.height = 60
                self.pop_merge.open()

    def on_press_plot(self):

        self.ids.box_bt_ok.clear_widgets()

        self.read_file_NM('xy')
        self.read_file_NM('yx')

        self.ids.lay_center.canvas.before.clear()
        self.ids.lay_center.canvas.before.add(Color(rgba=[1., 1., 1., 1.]))
        self.ids.lay_center.canvas.before.add(Rectangle(size=self.ids.lay_center.size, pos=self.ids.lay_center.pos))

        self.plot_rho_phi()

    def on_press_rho(self):
        self.pop_rhoplus = Popup()
        self.pop_rhoplus = Popup(title='Running Rhoplus')
        self.pop_rhoplus.size_hint = None, None
        self.pop_rhoplus.height = 60
        self.pop_rhoplus.width = 300
        self.pop_rhoplus.auto_dismiss = False
        open_pop = threading.Thread(target=self.exec_rho)
        open_pop.start()
        self.pop_rhoplus.open()
    # ----------------------------------------------------------------------------------------------------

    # ----------------------------- Executa os Programas externos (rsp2jones, rhoplus) -------------------
    def exec_merge(self):

        if len(sys.argv) == 3:
            os.system('rsp2jones ../' + self.site + '.dat xy_' + self.site + '.rsp yx_' + self.site + '.rsp > ' + sys.argv[2])
        else:
            os.system('rsp2jones ../' + self.site + '.dat xy_' + self.site + '.rsp yx_' + self.site + '.rsp > ' + self.tb_merge.text)
            self.pop_merge.dismiss()

    def exec_rho(self):

        try:
            self.save_file_NM()
            os.system('rhoplus < xy_' + self.site + '_NM')
            os.system('rhoplus < yx_' + self.site + '_NM')
        except AttributeError:

            self.pop_rhoplus.title = 'Select Site'
            self.pop_rhoplus.dismiss()

        self.pop_rhoplus.dismiss()
    # ----------------------------------------------------------------------------------------------------

    # -------------------------------- Salva a figura ----------------------------------------------------
    def save_export(self):

        self.ids.lay_center.export_to_png(self.tb_save.text)
        self.pop_save.dismiss()
    # ----------------------------------------------------------------------------------------------------

    # ----------------------------------------- Ferramentas ----------------------------------------------
    def calc_erro(self, component):

        out_err = getoutput('grep -i final ' + component + '_' + self.site + '.out')
        list_err = out_err.split()
        error = float(list_err[-1])
        error_corre = error + (error * 0.2)
        return error_corre

    def coorlog_to_pixel(self, coor, v0, fzoom, exp_min):

        x = int(v0 + ((log10(coor) + exp_min) * fzoom))
        return x
    # ----------------------------------------------------------------------------------------------------

    # ---------------------------------------- Manipula os Arquivos NM, rsp-------------------------------
    def read_file_NM(self, component):

        arq_NM = open(component + '_' + self.site + '_NM', 'r')

        if component == 'xy':
            self.list_period_select_xy = []
        elif component == 'yx':
            self.list_period_select_yx = []

        for line in arq_NM:
            ele_line = line.split()

            try:

                if ele_line == []:
                    continue
                if ele_line[0] == '0':
                    break
                if ele_line[0] == 'execute':
                    i = -1


                dict_T = {'T': float(ele_line[0]),
                          'rho': int(ele_line[-2]),
                          'phi': int(ele_line[-1]),
                          'component': component
                          }
                i += 1
                dict_T['n'] = i


                if component == 'xy':
                    self.list_period_select_xy.append(dict_T)
                elif component == 'yx':
                    self.list_period_select_yx.append(dict_T)

            except ValueError:
                continue

    def save_file_NM(self):

        file_NM_xy = open('xy_' + self.site + '_NM', 'r')

        brack_read = False
        str_save = ''
        i = -2
        for line in file_NM_xy:
            ele_line = line.split()

            try:
                if ele_line == []:

                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line

                elif ele_line[0] == 'execute':
                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line
                    i = -1
                elif ele_line[0] == '0':
                    brack_read = True
                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line
                elif ele_line[0] == 'criterion':
                    ele_line[-1] = str(self.calc_erro('xy'))
                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line

                elif i > -2:
                    i += 1
                    if brack_read:
                        save_line = ' '.join(ele_line) + '\n'
                        str_save += save_line
                    else:
                        ele_line[-2] = str(self.dict_rho_xy[str(i)].active_n)
                        ele_line[-1] = str(self.dict_phi_xy[str(i)].active_n)
                        save_line = ' '.join(ele_line) + '\n'
                        str_save += save_line
                else:
                    con_float = float(ele_line[0])
                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line
            except ValueError:
                save_line = ' '.join(ele_line) + '\n'
                str_save += save_line
            except IndexError:
                save_line = ' '.join(ele_line) + '\n'
                str_save += save_line

        print(str_save)
        file_NM_xy.close()
        file_NM_xy_save = open('xy_' + self.site + '_NM', 'w')
        file_NM_xy_save.write(str_save)
        file_NM_xy_save.close()

        # arquivo yx

        file_NM_yx = open('yx_' + self.site + '_NM', 'r')

        brack_read = False
        str_save = ''
        i = -2
        for line in file_NM_yx:
            ele_line = line.split()

            try:
                if ele_line == []:

                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line

                elif ele_line[0] == 'execute':
                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line
                    i = -1
                elif ele_line[0] == '0':
                    brack_read = True
                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line

                elif ele_line[0] == 'criterion':
                    ele_line[-1] = str(self.calc_erro('yx'))
                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line

                elif i > -2:
                    i += 1
                    if brack_read:
                        save_line = ' '.join(ele_line) + '\n'
                        str_save += save_line
                    else:
                        ele_line[-2] = str(self.dict_rho_yx[str(i)].active_n)
                        ele_line[-1] = str(self.dict_phi_yx[str(i)].active_n)
                        save_line = ' '.join(ele_line) + '\n'
                        str_save += save_line

                else:
                    con_float = float(ele_line[0])
                    save_line = ' '.join(ele_line) + '\n'
                    str_save += save_line
            except ValueError:
                save_line = ' '.join(ele_line) + '\n'
                str_save += save_line
            except IndexError:
                save_line = ' '.join(ele_line) + '\n'
                str_save += save_line

        print(str_save)
        file_NM_xy.close()
        file_NM_xy_save = open('yx_' + self.site + '_NM', 'w')
        file_NM_xy_save.write(str_save)
        file_NM_xy_save.close()

    def read_file_rsp(self, component, x0, y0, phi0, fzoomy):

        arq_xy = open(component + '_' + self.site + '.rsp', 'r')

        T = []
        rho_a = []
        err_rho_a = []
        rho_a_plus = []

        phi = []
        err_phi = []
        phi_plus = []

        for line in arq_xy:
            list_line = line.split()
            T.append(self.coorlog_to_pixel(coor=(1/float(list_line[0])), v0=x0, fzoom=65, exp_min=4))

            rho_a.append(self.coorlog_to_pixel(coor=float(list_line[1]), v0=y0, fzoom=65, exp_min=1))
            err_rho_a.append(float(list_line[2]))
            rho_a_plus.append(self.coorlog_to_pixel(coor=float(list_line[3]), v0=y0, fzoom=65, exp_min=1))

            if float(list_line[4]) > 90:
                self.lim_phi = 180
        arq_xy.close()

        arq_xy = open(component + '_' + self.site + '.rsp', 'r')
        for line in arq_xy:
            list_line = line.split()
            if self.lim_phi == 90:
                phi.append(int((float(list_line[4]) * fzoomy) + phi0))
                err_phi.append(float(list_line[5]))
                phi_plus.append(int((float(list_line[6]) * fzoomy) + phi0))

            elif self.lim_phi == 180:
                phi.append(int(((float(list_line[4]) * fzoomy)/2) + phi0))
                err_phi.append(float(list_line[5]))
                phi_plus.append(int(((float(list_line[6]) * fzoomy)/2) + phi0))

        arq_xy.close()
        return T, rho_a, err_rho_a, rho_a_plus, phi, err_phi, phi_plus
    # ---------------------------------------------------------------------------------------------------

    # ---------------------------------------- Desenha os elementos na Tela -----------------------------
    def plot_rho_phi(self):

        self.ids.lay_center.clear_widgets()

        file_xy = self.read_file_rsp('xy', x0=self.x0_plotxy, y0=200, phi0=70, fzoomy=1.45)
        file_yx = self.read_file_rsp('yx', x0=self.x0_plotyx, y0=200, phi0=70, fzoomy=1.45)

        self.ids.lay_center.add_widget(self.draws_lines_rho(x0=self.x0_plotxy, y0=200, dx=520, dy=390,
                                                            fzoom=65, border=1.05,
                                                            xmin=-4, xmax=4, ymin=-1, ymax=5,
                                                            limx=100000000, limy=1000000, label_y=True, component='XY'))

        self.ids.lay_center.add_widget(self.draws_lines_rho(x0=self.x0_plotyx, y0=200, dx=520, dy=390,
                                                            fzoom=65, border=1.05,
                                                            xmin=-4, xmax=4, ymin=-1, ymax=5,
                                                            limx=100000000, limy=1000000, label_y=False, component='YX'))

        self.ids.lay_center.add_widget(self.draws_lines_phi(x0=self.x0_plotxy, y0=70, dx=520, dy=130,
                                                            fzoom=65, fzoomy=1.45, border=1.05,
                                                            xmin=-4, xmax=4, ymin=0, ymax=90,
                                                            limx=100000000, limy=self.lim_phi, label_y=True, scale_y=True))

        self.ids.lay_center.add_widget(self.draws_lines_phi(x0=self.x0_plotyx, y0=70, dx=520, dy=130,
                                                            fzoom=65, fzoomy=1.45, border=1.05,
                                                            xmin=-4, xmax=4, ymin=0, ymax=90,
                                                            limx=100000000, limy=self.lim_phi, label_y=False, scale_y=True))

        lay_plot = FloatLayout()

        i = 0
        self.dict_points = {}
        self.dict_rho_xy = {}
        self.dict_phi_xy = {}
        self.dict_rho_yx = {}
        self.dict_phi_yx = {}
        for period in file_xy[0]:
            bt = PointPlot(pos=(file_xy[0][i], file_xy[1][i]))
            bt.cor = [.3, .3, .3, 1]
            bt.n = i
            if self.list_period_select_xy[i]['rho'] == 1:
                bt.select()
            self.dict_rho_xy[str(i)] = bt
            self.dict_points['xy_rho_a_' + str(i)] = bt
            lay_plot.add_widget(bt)
            i += 1

        i = 0
        for period in file_xy[0]:
            bt = PointPlot(pos=(file_xy[0][i], file_xy[4][i]))
            bt.cor = [.3, .3, .3, 1]
            bt.n = i
            if self.list_period_select_xy[i]['phi'] == 1:
                bt.select()
            self.dict_phi_xy[str(i)] = bt
            self.dict_points['xy_phi' + str(i)] = bt
            lay_plot.add_widget(bt)
            i += 1

        i = 0
        for period in file_yx[0]:
            bt = PointPlot(pos=(file_yx[0][i], file_yx[1][i]))
            bt.cor = [.3, .3, .3, 1]
            bt.n = i
            if self.list_period_select_yx[i]['rho'] == 1:
                bt.select()
            self.dict_rho_yx[str(i)] = bt
            self.dict_points['yx_rho_a_' + str(i)] = bt
            lay_plot.add_widget(bt)
            i += 1

        i = 0
        for period in file_yx[0]:
            bt = PointPlot(pos=(file_yx[0][i], file_yx[4][i]))
            bt.cor = [.3, .3, .3, 1]
            bt.n = i
            if self.list_period_select_yx[i]['phi'] == 1:
               bt.select()
            self.dict_phi_yx[str(i)] = bt
            self.dict_points['yx_phi_' + str(i)] = bt
            lay_plot.add_widget(bt)
            i += 1

        i=0
        list_bezier_rho_xy = []
        list_bezier_phi_xy = []
        list_bezier_rho_yx = []
        list_bezier_phi_yx = []
        for period in file_xy[0]:
            list_bezier_rho_xy.append(file_xy[0][i])
            list_bezier_rho_xy.append(file_xy[3][i])
            list_bezier_phi_xy.append(file_xy[0][i])
            list_bezier_phi_xy.append(file_xy[6][i])

            list_bezier_rho_yx.append(file_yx[0][i])
            list_bezier_rho_yx.append(file_yx[3][i])
            list_bezier_phi_yx.append(file_yx[0][i])
            list_bezier_phi_yx.append(file_yx[6][i])

            i += 1
        with lay_plot.canvas.before:
            Color(rgba=(0.2, 0.2, 0.2, 1.))
            Line(points=list_bezier_rho_xy, width=1.02)
            Line(points=list_bezier_phi_xy, width=1.02)
            Line(points=list_bezier_rho_yx, width=1.02)
            Line(points=list_bezier_phi_yx, width=1.02)

        lb_name_site = Label()
        lb_name_site.color = [0, 0, 0, 1]
        lb_name_site.markup = True
        lb_name_site.text = self.site
        lb_name_site.size_hint = None, None
        lb_name_site.height = 30
        lb_name_site.width = 100
        lb_name_site.font_size = 19
        lb_name_site.center_x = 585
        lb_name_site.center_y = 625
        lay_plot.add_widget(lb_name_site)

        self.ids.lay_center.add_widget(lay_plot)

    def draws_lines_rho(self, x0, y0, dx, dy, fzoom, border, xmin, xmax, ymin, ymax, limx, limy, label_y, component):

        xf = x0 + dx
        yf = y0 + dy

        deca_x = range(xmin, xmax + 1)
        deca_y = range(ymin, ymax + 1)

        scale = [1, 2, 3, 4, 5, 6, 7, 8, 9,
                 10, 20, 30, 40, 50, 60, 70, 80, 90,
                 100, 200, 300, 400, 500, 600, 700, 800, 900,
                 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000,
                 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000,
                 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000,
                 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000,
                 10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000,
                 100000000]

        scale_log = []
        for i in scale:
            scale_log.append(log10(i))

        scale_log_zoom = []
        for i in scale_log:
            scale_log_zoom.append(i * fzoom)

        self.lay = FloatLayout()
        with self.lay.canvas:
            Color(rgba=[0, 0, 0, 1])
            Line(points=[x0, y0, xf, y0], width=border)
            Color(rgba=[0, 0, 0, 1])
            Line(points=[x0, y0, x0, yf], width=border)
            Color(rgba=[0, 0, 0, 1])
            Line(points=[xf, y0, xf, yf], width=border)
            Color(rgba=[0, 0, 0, 1])
            Line(points=[x0, yf, xf, yf], width=border)
            Color(rgba=[0, 0, 0, 1])

            c = 0
            for i in scale_log_zoom:
                if scale[c] > limx:
                    continue
                else:
                    Color(rgba=[0., 0., 0., 1.])
                    Line(points=[i + x0, y0, i + x0, y0 - 5])
                    c += 1
            c = 0
            for i in scale_log_zoom:
                if scale[c] > limy:
                    continue
                else:
                    Color(rgba=[0, 0, 0, 1])
                    Line(points=[x0, i + y0, x0 - 5, i + y0])
                c += 1

            c = 0
            for i in scale_log_zoom:
                if scale[c] > limy:
                    continue
                else:
                    Color(rgba=[0, 0, 0, 1])
                    Line(points=[xf, i + y0, xf + 5, i + y0])
                c += 1

            for i in deca_y:

                if deca_y[0] < 0:
                    pos = -deca_y[0]

                lb = Label()
                lb.color = [0,0,0,1]
                lb.markup = True
                lb.text = '10' + '[sup][size=10]' + str(i) + '[/size][/sup]'
                lb.size_hint = None, None
                lb.height = 30
                lb.width = 30

                y = int((y0 - 20) + ((i + pos) * fzoom))
                lb.pos = x0 - 35, y
                self.lay.add_widget(lb)

        if label_y == True:

            lb_rho_ohm_meter = LabelRot()
            lb_rho_ohm_meter.size_hint = None, None
            lb_rho_ohm_meter.height = 100
            lb_rho_ohm_meter.width = 25
            lb_rho_ohm_meter.markup =True
            lb_rho_ohm_meter.italic = True
            lb_rho_ohm_meter.text = 'ρ (Ω.m)'
            lb_rho_ohm_meter.color = [0., 0., 0., 1.]
            lb_rho_ohm_meter.center_x = x0 - 40
            lb_rho_ohm_meter.center_y = int(y0 + dy/2)

            self.lay.add_widget(lb_rho_ohm_meter)

        lb_component = Label()
        lb_component.color = [0, 0, 0, 1]
        lb_component.markup = True
        lb_component.text = component
        lb_component.size_hint = None, None
        lb_component.height = 30
        lb_component.width = 30
        lb_component.font_size = 17
        lb_component.center_x = int((dx/2) + x0)
        lb_component.center_y = yf + 30

        self.lay.add_widget(lb_component)

        return self.lay

    def draws_lines_phi(self, x0, y0, dx, dy, fzoom,fzoomy, border, xmin, xmax, ymin, ymax, limx, limy, label_y, scale_y):
        xf = x0 + dx
        yf = y0 + dy

        deca_x = range(xmin, xmax + 1)
        deca_y = range(ymin, ymax, 15)

        if limy == 90:
            lb_y = [0, 45, 90]
        elif limy == 180:
            lb_y = [0, 90, 180]

        scale = [1, 2, 3, 4, 5, 6, 7, 8, 9,
                 10, 20, 30, 40, 50, 60, 70, 80, 90,
                 100, 200, 300, 400, 500, 600, 700, 800, 900,
                 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000,
                 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000,
                 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000,
                 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000,
                 10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000,
                 100000000]

        scale_log = []
        for i in scale:
            scale_log.append(log10(i))

        scale_log_zoom = []
        for i in scale_log:
            scale_log_zoom.append(i * fzoom)

        self.lay = FloatLayout()
        with self.lay.canvas:
            Color(rgba=[0, 0, 0, 1])
            Line(points=[x0, y0, xf, y0], width=border)
            Color(rgba=[0, 0, 0, 1])
            Line(points=[x0, y0, x0, yf], width=border)
            Color(rgba=[0, 0, 0, 1])
            Line(points=[xf, y0, xf, yf], width=border)
            Color(rgba=[0, 0, 0, 1])
            Line(points=[x0, yf, xf, yf], width=border)
            Color(rgba=[0, 0, 0, 1])

            c = 0
            for i in scale_log_zoom:
                if scale[c] > limx:
                    continue
                else:
                    Color(rgba=[0., 0., 0., 1.])
                    Line(points=[i + x0, y0, i + x0, y0 - 5])
                    c += 1

            for i in deca_y:
                i = int(i * fzoomy)
                Color(rgba=[0., 0., 0., 1.])
                Line(points=[x0 - 5, i + y0, x0, i + y0])

            for i in deca_y:
                i = int(i * fzoomy)
                Color(rgba=[0., 0., 0., 1.])
                Line(points=[xf + 5, i + y0, xf, i + y0])

            if scale_y == True:
                for i in lb_y:

                    lb_phi = Label()
                    lb_phi.color = [0, 0, 0, 1]
                    lb_phi.markup = True
                    lb_phi.text = str(i)
                    lb_phi.size_hint = None, None
                    lb_phi.height = 30
                    lb_phi.width = 30

                    if limy == 180:
                        y = (i/2 * fzoomy) + y0

                    elif limy == 90:
                        y = (i * fzoomy) + y0
                    lb_phi.center_x = xf + 15
                    lb_phi.center_y = y

                    self.lay.add_widget(lb_phi)

            for i in deca_x:

                if deca_x[0] < 0:
                    pos = -deca_x[0]

                lb = Label()
                lb.color = [0,0,0,1]
                lb.markup = True
                lb.text = '10' + '[sup][size=10]' + str(i) + '[/size][/sup]'
                lb.size_hint = None, None
                lb.height = 30
                lb.width = 30

                x = int((x0 - 15) + ((i + pos) * fzoom))
                lb.pos = x, y0 - 30
                self.lay.add_widget(lb)


        if label_y == True:

            lb_rho_ohm_meter = LabelRot()
            lb_rho_ohm_meter.size_hint = None, None
            lb_rho_ohm_meter.height = 100
            lb_rho_ohm_meter.width = 25
            lb_rho_ohm_meter.markup =True
            lb_rho_ohm_meter.italic = True
            lb_rho_ohm_meter.text = 'φ (graus)'
            lb_rho_ohm_meter.color = [0., 0., 0., 1.]
            lb_rho_ohm_meter.center_x = x0 - 40
            lb_rho_ohm_meter.center_y = int(y0 + dy/2)

            self.lay.add_widget(lb_rho_ohm_meter)
        return self.lay
    # ----------------------------------------------------------------------------------------------------


class RhoplusGUI(App):

    def build(self):
        return Screen()

window = RhoplusGUI()
try:
    Window.size = 1200, 650
except AttributeError:
    print('='*50)
    print('----------ERROR------------')
    print('Type in Terminal:')
    print('sudo add-apt-repository ppa:kivy-team/kivy-daily')
    print('sudo apt-get clean')
    print('sudo apt-get install python3-kivy')
    print('=' *50)
    sys.exit()

window.run()
