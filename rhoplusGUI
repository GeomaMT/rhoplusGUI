#!/usr/bin/python3
#coding: utf-8


"""
Developed by Garcia P. R.
Date: 2019-02-07
Email: garcia.rpatrick@gmail.com


Program for communication between Rho+ (Robert L. Parker & John R. Booker, 1996) and Python 3.6.
This program uses a GUI build in Kivy 1.11 for interaction with the user.
"""

"""
   This program belongs to the software collection of 
INPE/GEOMA by Marcelo Banik de Padua and Marcos Banik de Padua

License:
"""

# Configuration
__author__ = "Patrick Rogger Garcia"
__email__ = "garcia.rpatrick@gmail.com"

import pkgutil
import subprocess
import os
from math import log10
import sys

USER = os.environ['HOME']
PWD_install = USER + '/.rhoplusGUI/'

class Install():

    def __init__(self):
        self.check_install_python()
        self.check_install_shell()
        self.check_install_geoma()

    def check_install_python(self):

        kivy = (print('Check Kivy -- OK') if pkgutil.find_loader("kivy") else self.install_python())

        matplotlib = (print('Check MatplotLib -- OK') if pkgutil.find_loader("matplotlib") else self.install_python())

    def check_install_shell(self):
        rhoplus = (print('Check rhoplus -- OK')
                   if os.system('which rhoplus') == 0 else self.install_shell('rhoplus'))

    def check_install_geoma(self):

        z2rhoplus = (print('Check Z2rhoplus -- OK')
                     if os.system('which Z2rhoplus') == 0 else self.install_geoma('Z2rhoplus'))

        rsp2jones = (print('Check rsp2jones -- OK')
                     if os.system('which rsp2jones') == 0 else self.install_geoma('rsp2jones'))

        plot_rhoplus = (print('Check plot-rhoplus -- OK')
                   if os.system('which plot-rhoplus') == 0 else self.install_geoma('plot_rhoplus'))

    def install_python(self):
        print('You need to install kivy and matplotlib\n')
        print('More information at https://kivy.org/#download and \n'
              '      https://matplotlib.org/users/installing.html\n'
              '\n'
              'Type in the console:\n'
              '\n'
              'sudo apt install python3-pip\n'
              'sudo pip3 install --upgrade pip\n'
              'sudo pip3 install kivy\n'
              'sudo pip3 install matplotlib\n')
        sys.exit()

    def install_shell(self, program):
        if program == 'rhoplus':
            print('You need to install the Rhoplus, visit: http://mtnet.info/main/source.html#1d_codes')

    def install_geoma(self, script):
        print('You need to install the GEOMA software -- ' + script + '\n'
              'Contact us by E-mail:\n'
              '\n'
              'Marcelo Banik de Padua (marcelo.banik@gmail.com)')
        sys.exit()

install = Install()

from kivy.app import App

import kivy
kivy.require('1.10.0')

from kivy.lang import Builder
from kivy.properties import ObjectProperty
from kivy.core.window import Window
from kivy.core.window import WindowBase
from kivy.clock import Clock

from kivy.config import Config
Config.set('graphics', 'multisamples', 16)

from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.floatlayout import FloatLayout

from kivy.graphics import Color, Line
from kivy.metrics import sp

import matplotlib.pyplot as plt



file_code_kivy = open(PWD_install + 'kivy_code.kv', 'r')
code_kivy = file_code_kivy.read()
file_code_kivy.close()


Builder.load_string(code_kivy)

def on_keyboard_none(*args):
    pass

class PlotMatplotLib():

    def __init__(self, site):

        self.site = site


        self.open()
        self.select_model()
        self.plot()


    def plot(self):

        left, width = 0.07, 0.4
        bottom, height = 0.35, .65

        bottom_phi = 0.1
        left_xy = left + width + 0.08

        height_phi = 0.25


        rect_rho_xy = [left, bottom, width, height]
        rect_rho_yx = [left_xy, bottom, width, height]

        rect_phi_xy = [left, bottom_phi, width, height_phi]
        rect_phi_yx = [left_xy, bottom_phi, width, height_phi]

        size_point = 4

        fig = plt.figure()
        fig.suptitle(self.site, fontsize=15)

        fig.set_size_inches(10.5, 6.8, forward=True)

        rho_xy = plt.axes(rect_rho_xy)
        rho_yx = plt.axes(rect_rho_yx)
        phi_xy = plt.axes(rect_phi_xy)
        phi_yx = plt.axes(rect_phi_yx)

        rho_xy.set_title('XY')
        rho_xy.set_aspect('equal')
        rho_xy.plot(self.T_xy, self.Mrho_xy)
        rho_xy.plot(self.T_xy_n_rho, self.rhoa_xy_n, 'ro', ms=size_point)
        rho_xy.plot(self.T_xy_y_rho, self.rhoa_xy_y, 'ko', ms=size_point)
        rho_xy.set_xlim(1E-4, 1E4)
        rho_xy.set_ylim(1E-1, 1E5)
        rho_xy.set_xscale('log')
        rho_xy.set_yscale('log')
        rho_xy.grid()
        rho_xy.set_ylabel(r'$\rho$ ($\Omega.m$)')


        rho_yx.set_title('YX')
        rho_yx.set_aspect('equal')
        rho_yx.plot(self.T_yx, self.Mrho_yx)
        rho_yx.plot(self.T_yx_n_rho, self.rhoa_yx_n, 'ro', ms=size_point)
        rho_yx.plot(self.T_yx_y_rho, self.rhoa_yx_y, 'ko', ms=size_point)
        rho_yx.set_xlim(1E-4, 1E4)
        rho_yx.set_ylim(1E-1, 1E5)
        rho_yx.set_xscale('log')
        rho_yx.set_yscale('log')
        rho_yx.grid()
        rho_yx.legend(('Rho+', 'Data', 'Model'), loc='upper right')

        phi_xy.plot(self.T_xy, self.Mphi_xy)
        phi_xy.plot(self.T_xy_n_phi, self.phia_xy_n, 'ro', ms=size_point)
        phi_xy.plot(self.T_xy_y_phi, self.phia_xy_y, 'ko', ms=size_point)
        phi_xy.set_xlim(1E-4, 1E4)
        phi_xy.set_ylim(0, 180)
        phi_xy.set_xscale('log')
        phi_xy.grid()
        phi_xy.set_ylabel(r'$\phi$ $(degrees)$')
        phi_xy.set_xlabel('T (s)')

        phi_yx.plot(self.T_yx, self.Mphi_yx)
        phi_yx.plot(self.T_yx_n_phi, self.phia_yx_n, 'ro', ms=size_point)
        phi_yx.plot(self.T_yx_y_phi, self.phia_yx_y, 'ko', ms=size_point)
        phi_yx.set_xlim(1E-4, 1E4)
        phi_yx.set_ylim(0, 180)
        phi_yx.set_xscale('log')
        phi_yx.grid()
        phi_yx.set_xlabel('T (s)')

        plt.savefig(self.site + '.png', dpi=300)
        plt.show()



    def open(self):
        xy_rsp = open('xy_{}.rsp'.format(self.site), 'r').read()
        xy_rsp = xy_rsp.splitlines()


        self.T_xy = [1/float(i.split()[0]) for i in xy_rsp]
        self.T_xy_y_rho = self.T_xy.copy()
        self.T_xy_n_rho = self.T_xy.copy()

        self.T_xy_y_phi = self.T_xy.copy()
        self.T_xy_n_phi = self.T_xy.copy()

        self.rhoa_xy_y = [float(i.split()[1]) for i in xy_rsp]
        self.rhoa_xy_n = self.rhoa_xy_y.copy()

        self.Erho_xy = [float(i.split()[2]) for i in xy_rsp]
        self.Mrho_xy = [float(i.split()[3]) for i in xy_rsp]

        self.phia_xy_y = [float(i.split()[4]) for i in xy_rsp]
        self.phia_xy_n = self.phia_xy_y.copy()

        self.Ephi_xy = [float(i.split()[5]) for i in xy_rsp]
        self.Mphi_xy = [float(i.split()[6]) for i in xy_rsp]



        yx_rsp = open('yx_{}.rsp'.format(self.site), 'r').read()
        yx_rsp = yx_rsp.splitlines()

        self.T_yx = [1/float(i.split()[0]) for i in yx_rsp]
        self.T_yx_y_rho = self.T_yx.copy()
        self.T_yx_n_rho = self.T_yx.copy()

        self.T_yx_y_phi = self.T_yx.copy()
        self.T_yx_n_phi = self.T_yx.copy()

        self.rhoa_yx_y = [float(i.split()[1]) for i in yx_rsp]
        self.rhoa_yx_n = self.rhoa_yx_y.copy()

        self.Erho_yx = [float(i.split()[2]) for i in yx_rsp]

        self.Mrho_yx = [float(i.split()[3]) for i in yx_rsp]

        self.phia_yx_y = [float(i.split()[4]) for i in yx_rsp]
        self.phia_yx_n = self.phia_yx_y.copy()

        self.Ephi_yx = [float(i.split()[5]) for i in yx_rsp]
        self.Mphi_yx = [float(i.split()[6]) for i in yx_rsp]

    def select_model(self):

        i = 0
        for T in self.T_xy:
            if self.Erho_xy[i] == 0:
                self.T_xy_n_rho[i] = None
                self.rhoa_xy_n[i] = None
            else:
                self.T_xy_y_rho[i] = None
                self.rhoa_xy_y[i] = None
                self.Erho_xy[i] = None

            if self.Ephi_xy[i] == 0:
                self.T_xy_n_phi[i] = None
                self.phia_xy_n[i] = None
            else:
                self.T_xy_y_phi[i] = None
                self.phia_xy_y[i] = None
                self.Ephi_xy[i] = None
            i += 1

        i = 0
        for T in self.T_yx:
            if self.Erho_yx[i] == 0:
                self.T_yx_n_rho[i] = None
                self.rhoa_yx_n[i] = None
            else:
                self.T_yx_y_rho[i] = None
                self.rhoa_yx_y[i] = None
                self.Erho_yx[i] = None

            if self.Ephi_yx[i] == 0:
                self.T_yx_n_phi[i] = None
                self.phia_yx_n[i] = None
            else:
                self.T_yx_y_phi[i] = None
                self.phia_yx_y[i] = None
                self.Ephi_yx[i] = None

            i += 1


class ButtonRHO(Button):
    pass

class LabelRot(Label):
    pass

class PopUPMerge(BoxLayout):
    site = ObjectProperty(None)
    site_origin = ObjectProperty(None)

    def save(self):
        if self.ids.data.active:
            self.rsp_jones('dados')
        elif self.ids.model.active:
            self.rsp_jones('modelo')
        elif self.ids.mergetf.active:
            self.rsp_jones_tf()
        else:
            self.rsp_jones('composto')


        graphic.pop_merge.dismiss()

    def rsp_jones(self, mode):
        rsp_jones = subprocess.getoutput('rsp2jones ../{}.dat xy_{}.rsp yx_{}.rsp {}'.format(
                                                    self.site_origin, self.site, self.site, mode))

        arq_save = open(self.ids.dir_merge.path + '/' + self.ids.text_save.text, 'w')
        arq_save.write(rsp_jones)
        arq_save.close()

    def rsp_jones_tf(self):
        pass


class PopUPExportFigure(BoxLayout):
    site = ObjectProperty(None)

    def save(self):
        if self.ids.skivy.active:
            self.save_kivy()
        elif self.ids.matplot.active:
            self.save_matplotlib()
        else:
            self.save_gmt()

        graphic.pop_export_figure.dismiss()

    def save_kivy(self):
        graphic.ids.export_image.export_to_png(self.ids.text_save.text)


    def save_matplotlib(self):
        export = PlotMatplotLib(self.site)


    def save_gmt(self):
        export_xy = os.system('plot-rhoplus xy_{}.rsp &'.format(graphic.site))
        export_xy = os.system('plot-rhoplus yx_{}.rsp &'.format(graphic.site))


class PopUpExecuteRhoplus(Popup):

    site_origin = ''
    def __init__(self, **kwargs):
        super(PopUpExecuteRhoplus, self).__init__(**kwargs)

        WindowBase.on_key_down = self.keyboard

    def keyboard(self, key, scancode, codepoint, modifier):

        if scancode == 40:
            self.on_press_ok()


    def on_press_cancel(self):
        app.current = 'menu'
        WindowBase.on_key_down = on_keyboard_none
        self.dismiss()

    def on_press_ok(self):

        self.parameters = {}
        self.parameters['Zorigin'] = self.site_origin
        self.parameters['Zfile'] = self.ids.zfile.text
        self.parameters['c'] = self.ids.c.text
        self.parameters['s'] = self.ids.s.text
        self.parameters['Trho'] = self.ids.Trho.text
        self.parameters['rot'] = self.ids.rot.text
        self.parameters['ef'] = self.ids.ef.text
        self.dismiss()
        window.title = 'RhoplusGUI -- ' + self.parameters['Zfile']
        app.current = 'graphic'
        graphic.init_rho(self.parameters)


class BoxSelectLayout(FloatLayout):
    def __init__(self, parent, points, **kwargs):
        super(BoxSelectLayout, self).__init__(**kwargs)


        self.size = parent.size
        self.pos = parent.pos

        self.points = points

        self.bind(on_touch_down=self.on)
        self.bind(on_touch_up=self.up)
        self.bind(on_touch_move=self.move)

        height = self.height - sp(100)

        self.x0 = self.x + sp(70)
        self.xf = self.x0 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        self.y0 = self.y + sp(40)
        self.yf = self.y0 + 3 * height / 3

        inter = self.width * .05 + sp(40)

        self.x0_2 = self.xf + inter
        self.xf_2 = self.x0_2 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        self.change_mouse()

        self.in_grafic = False
        self.select = False

        self.i_x_on = None
        self.i_y_on = None

    def on(self, instance, value):
        self.i_x_on = value.pos[0]
        self.i_y_on = value.pos[1]

    def up(self, instance, value):



        if self.select:

            region = [self.i_x_on, self.i_y_on, value.pos[0], value.pos[1]]


            for point in self.points.points_rho_xy:
                self.point_in_select(point, region)

            for point in self.points.points_rho_yx:
                self.point_in_select(point, region)

            for point in self.points.points_phi_xy:
                self.point_in_select(point, region)

            for point in self.points.points_phi_yx:
                self.point_in_select(point, region)

        self.i_x_on = None
        self.i_y_on = None
        self.canvas.before.clear()




    def move(self, instance, value):
        self.canvas.before.clear()
        self.delta_x = value.pos[0] - self.i_x_on

        self.delta_y = value.pos[1] - self.i_y_on

        if self.in_grafic and (abs(self.delta_x) > sp(5) and abs(self.delta_y) > sp(5)):

            border = sp(1.2)

            line_left = Line(points=[self.i_x_on, self.i_y_on, self.i_x_on, value.pos[1]], width=border)
            line_bottom = Line(points=[self.i_x_on, self.i_y_on, value.pos[0], self.i_y_on], width=border)
            line_right = Line(points=[value.pos[0], self.i_y_on, value.pos[0], value.pos[1]], width=border)
            line_top = Line(points=[self.i_x_on, value.pos[1], value.pos[0], value.pos[1]], width=border)


            self.canvas.before.add(Color(rgba=[0.3, 0.3, 0.3, 1.]))
            self.canvas.before.add(line_left)
            self.canvas.before.add(line_bottom)
            self.canvas.before.add(line_right)
            self.canvas.before.add(line_top)

            self.select = True
        else:
            self.select = False


    def change_mouse(self):
        Clock.schedule_interval(self.mouse_in_grafic, 1/15)

    def mouse_in_grafic(self, *args):
        x = Window.mouse_pos[0]
        y = Window.mouse_pos[1]

        if (x > self.x0 and x < self.xf and \
            self.y0 < y < self.yf) or \
           (x > self.x0_2 and x < self.xf_2 and \
            y > self.y0 and y < self.yf):
            Window.set_system_cursor('crosshair')
            self.in_grafic = True

        else:
            Window.set_system_cursor('arrow')
            self.in_grafic = False

    def point_in_select(self, point, region):

        region_x = [region[0], region[2]]
        region_y = [region[1], region[3]]

        if point.x > min(region_x) and point.x < max(region_x) and \
            point.y > min(region_y) and point.y < max(region_y):

            point.on_press()


class MenuInit(Screen):
    def on_press_execute(self, path, selection):

        if selection == []:
            pop = Popup(title='Select a Zfile (.dat)')
            pop.size_hint = None, None
            pop.height = '70sp'
            pop.width = '200sp'
            pop.open()
        else:
            self.popup_execute_rhoplus = PopUpExecuteRhoplus()
            self.popup_execute_rhoplus.site_origin = os.path.basename(selection[0])
            self.popup_execute_rhoplus.open()
            os.chdir(path)

            self.popup_execute_rhoplus.ids.zfile.text = \
                os.path.basename(selection[0])


    def on_press_close(self):
        window.stop()

class Rhoplus():

    def __init__(self, site, Zorigin, criterion, surface, fix_rho, rotation, error_floor):
        self.site = site
        self.zorigin = Zorigin.replace('.dat', '')
        self.criterion = criterion
        self.surface = surface
        self.fix_rho = fix_rho
        self.rotation = rotation
        self.error_floor = error_floor


        self.xy_NM = []
        self.yx_NM = []

        self.xy_rsp = []
        self.yx_rsp = []

        if os.path.isdir(self.zorigin) == False:
            os.mkdir(self.zorigin)


    def make_NM(self):
        xy = subprocess.getoutput('Z2rhoplus ../{}.dat cmp=xy c={} s={} Trho={} rot={} ef={}'.format(
                            self.zorigin, self.criterion, self.surface, self.fix_rho,
                            self.rotation, self.error_floor))

        file_xy = open('xy_' + self.site + '_NM', 'w')
        file_xy.write(xy)
        file_xy.close()

        yx = subprocess.getoutput('Z2rhoplus ../{}.dat cmp=yx c={} s={} Trho={} rot={} ef={}'.format(
            self.zorigin, self.criterion, self.surface, self.fix_rho,
            self.rotation, self.error_floor))

        file_yx = open('yx_' + self.site + '_NM', 'w')
        file_yx.write(yx)
        file_yx.close()

    def check_NM(self):

        return os.path.isfile('xy_' + self.site + '_NM'),\
               os.path.isfile('yx_' + self.site + '_NM')

    def run(self):
        self.rhoplus_exec = subprocess.getoutput('rhoplus < xy_' + self.site + '_NM')
        #print(self.rhoplus_exec)

        self.rhoplus_exec = subprocess.getoutput('rhoplus < yx_' + self.site + '_NM')
        #print(self.rhoplus_exec)


    def read_NM(self):

        xy = open('xy_' + self.site + '_NM', 'r')

        xy_periods = []
        read = False

        for readline in xy:
            line = readline.split()

            if line[0] == '0':
                read = False
                break

            if read:

                period = {}
                period['T'] = float(line[0])
                period['rho'] = float(line[1])
                period['Erho'] = float(line[2])
                period['phi'] = float(line[3])
                period['Ephi'] = float(line[4])
                period['Srho'] = bool(int(line[5]))
                period['Sphi'] = bool(int(line[6]))
                xy_periods.append(period)
            elif line[0] == 'execute':
                read = True
        xy.close()

        self.xy_NM = xy_periods

        yx = open('yx_' + self.site + '_NM', 'r')

        yx_periods = []
        read = False

        for readline in yx:
            line = readline.split()

            if line[0] == '0':
                read = False
                break

            if read:

                period = {}
                period['T'] = float(line[0])
                period['rho'] = float(line[1])
                period['Erho'] = float(line[2])
                period['phi'] = float(line[3])
                period['Ephi'] = float(line[4])
                period['Srho'] = bool(int(line[5]))
                period['Sphi'] = bool(int(line[6]))
                yx_periods.append(period)
            elif line[0] == 'execute':
                read = True

        yx.close()

        self.yx_NM = yx_periods

    def save_NM(self):
        self.check_change_NM('xy', 'rho')
        self.check_change_NM('xy', 'phi')
        self.check_change_NM('yx', 'rho')
        self.check_change_NM('yx', 'phi')

    def check_change_NM(self, component, element):

        if component == 'xy':
            check = self.xy_NM
        else:
            check = self.yx_NM

        if element == 'rho':
            index = -2
            key = 'Srho'
        else:
            index = -1
            key = 'Sphi'

        file = open(component + '_' + self.site + '_NM', 'r')
        i = 0
        read = False
        save = []
        for read_line in file:
            line = read_line.split()
            try:
                if line[0] == '0':
                    read = False
                if line[0] == 'execute':
                    read = True
                    save.append(read_line)
                    continue

            except IndexError:
                pass
            if read:
                if check[i][key]:
                    line[index] = '1'
                    read_line = ' '.join(line) + '\n'
                    i += 1
                else:
                    line[index] = '0'
                    read_line = ' '.join(line) + '\n'
                    i += 1

            save.append(read_line)
        file.close()

        file = open(component + '_' + self.site + '_NM', 'w')
        for line in save:
            file.write(line)
        file.close()

    def read_rsp(self):
        self.xy_rsp = []
        self.yx_rsp = []




        xy = open('xy_' + self.site + '.rsp', 'r')

        for read_line in xy:
            line = read_line.split()

            period = {}
            period['T'] = float(line[0])
            period['rhoa'] = float(line[1])
            period['Erho'] = float(line[2])
            period['Mrho'] = float(line[3])
            period['phia'] = float(line[4])
            period['Ephia'] = float(line[5])
            period['Mphi'] = float(line[6])
            self.xy_rsp.append(period)
        xy.close()

        yx = open('yx_' + self.site + '.rsp', 'r')

        for read_line in yx:
            line = read_line.split()

            period = {}
            period['T'] = float(line[0])
            period['rhoa'] = float(line[1])
            period['Erho'] = float(line[2])
            period['Mrho'] = float(line[3])
            period['phia'] = float(line[4])
            period['Ephia'] = float(line[5])
            period['Mphi'] = float(line[6])
            self.yx_rsp.append(period)
        yx.close()


class DrawGraphicPlot(FloatLayout):

    def __init__(self, name_station, **kwargs):
        super(DrawGraphicPlot, self).__init__(**kwargs)
        self.name_station = name_station


    def draw_grafic(self):
        self.draw_lines_rho()
        self.draw_lines_phi()
        self.draw_header()


    def draw_header(self):

        height = self.parent.height - sp(100)
        inter = self.parent.width * .05 + sp(40)

        y0 = self.parent.y + height / 3 + sp(40)
        yf = y0 + 2 * height / 3

        x0 = self.parent.x + sp(70)
        xf = x0 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        x0_2 = xf + inter
        xf_2 = x0_2 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        lb_title = Label()
        lb_title.size_hint = None, None
        lb_title.height = '20sp'
        lb_title.width = '400sp'
        lb_title.font_size = '24sp'
        lb_title.center_x = xf + inter/2
        lb_title.y = yf + sp(30)
        lb_title.color = [0., 0., 0., 1.]
        lb_title.text = self.name_station

        lb_xy = Label()
        lb_xy.size_hint = None, None
        lb_xy.height = '20sp'
        lb_xy.width = '20sp'
        lb_xy.font_size = '17sp'
        lb_xy.center_x = x0 + (xf - x0)/2
        lb_xy.y = yf + sp(10)
        lb_xy.color = [0., 0., 0., 1.]
        lb_xy.text = 'XY'

        lb_yx = Label()
        lb_yx.size_hint = None, None
        lb_yx.height = '20sp'
        lb_yx.width = '20sp'
        lb_yx.font_size = '17sp'
        lb_yx.center_x = x0_2 + (xf_2 - x0_2) / 2
        lb_yx.y = yf + sp(10)
        lb_yx.color = [0., 0., 0., 1.]
        lb_yx.text = 'YX'


        self.add_widget(lb_title)
        self.add_widget(lb_xy)
        self.add_widget(lb_yx)


    def draw_lines_rho(self):

        height = self.parent.height - sp(100)
        inter = self.parent.width * .05 + sp(40)

        y0 = self.parent.y + height/3 + sp(40)
        yf = y0 + 2 * height/3

        x0 = self.parent.x + sp(70)
        xf = x0 + 2 * height/3 + 2*(2*height/3)/6

        x0_2 = xf + inter
        xf_2 = x0_2 + 2 * height/3 + 2*(2*height/3)/6


        border = 1.05

        limx = 100000000
        limy = 1000000

        dec_x = range(-4, 4)
        dec_y = range(-1, 6)

        fzoom = (2*height/3)/(log10(limy))

        scale = [1, 2, 3, 4, 5, 6, 7, 8, 9,
                 10, 20, 30, 40, 50, 60, 70, 80, 90,
                 100, 200, 300, 400, 500, 600, 700, 800, 900,
                 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000,
                 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000,
                 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000,
                 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000,
                 10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000,
                 100000000]

        scale_log = [log10(i) for i in scale]
        scale_log_zoom = [i * fzoom for i in scale_log]

        self.canvas.clear()
        with self.canvas:
            Color(rgba=(0., 0., 0., 1.))
            Line(points=[x0, y0, x0, yf], width=border)
            Line(points=[x0, y0, xf, y0], width=border)
            Line(points=[x0, yf, xf, yf], width=border)
            Line(points=[xf, y0, xf, yf], width=border)

            Line(points=[x0_2, y0, x0_2, yf], width=border)
            Line(points=[x0_2, y0, xf_2, y0], width=border)
            Line(points=[x0_2, yf, xf_2, yf], width=border)
            Line(points=[xf_2, y0, xf_2, yf], width=border)

            c = 0
            for i in scale_log_zoom:
                if scale[c] > limx:
                    continue
                else:
                    Line(points=[i + x0, y0, i + x0, y0 - sp(5)])
                    Line(points=[i + x0_2, y0, i + x0_2, y0 - sp(5)])
                    c += 1
            c = 0
            for i in scale_log_zoom:
                if scale[c] > limy:
                    continue
                else:
                    Line(points=[x0, i + y0, x0 - sp(5), i + y0])
                    Line(points=[xf, i + y0, xf + sp(5), i + y0])
                    Line(points=[x0_2, i + y0, x0_2 - sp(5), i + y0])
                    Line(points=[xf_2, i + y0, xf_2 + sp(5), i + y0])
                    c += 1




        for i in dec_y:

            if dec_y[0] < 0:
                pos = -dec_y[0]

            lb = Label()
            lb.color = [0,0,0,1]
            lb.markup = True
            lb.text = '10' + '[sup][size=10]' + str(i) + '[/size][/sup]'
            lb.size_hint = None, None
            lb.font_size = '17sp'
            lb.height = sp(30)
            lb.width = sp(30)

            y = int((y0 - 20) + ((i + pos) * fzoom))
            lb.pos = x0 - 35, y
            self.add_widget(lb)

            lb_2 = Label()
            lb_2.color = [0, 0, 0, 1]
            lb_2.markup = True
            lb_2.text = '10' + '[sup][size=10]' + str(i) + '[/size][/sup]'
            lb_2.size_hint = None, None
            lb_2.font_size = '17sp'
            lb_2.height = sp(30)
            lb_2.width = sp(30)

            y = int((y0 - 20) + ((i + pos) * fzoom))
            lb_2.pos = x0_2 - 35, y
            self.add_widget(lb_2)







        lb_rho_ohm_meter = LabelRot()
        lb_rho_ohm_meter.size_hint = None, None
        lb_rho_ohm_meter.height = sp(100)
        lb_rho_ohm_meter.width = sp(25)
        lb_rho_ohm_meter.markup = True
        lb_rho_ohm_meter.italic = True
        lb_rho_ohm_meter.text = 'ρ (Ω.m)'
        lb_rho_ohm_meter.font_size = '18sp'
        lb_rho_ohm_meter.color = [0., 0., 0., 1.]
        lb_rho_ohm_meter.center_x = x0 - sp(50)
        lb_rho_ohm_meter.center_y = int(y0 + (2*height/3) / 2)

        self.add_widget(lb_rho_ohm_meter)


    def draw_lines_phi(self):

        height = self.parent.height - sp(100)
        inter = self.parent.width * .05 + sp(40)

        y0 = self.parent.y + sp(40)
        yf = y0 + height/3

        x0 = self.parent.x + sp(70)
        xf = x0 + 2 * height/3 + 2*(2*height/3)/6

        x0_2 = xf + inter
        xf_2 = x0_2 + 2 * height/3 + 2*(2*height/3)/6


        border = 1.05

        limx = 100000000
        limy = 1000000

        lim_phi = 180
        step_phi = 45

        dec_x = range(-4, 4 + 1)
        dec_y = range(-1, 5 + 1)

        fzoom = (2*height/3)/(log10(limy))
        fzoom_phi = ((height/3)/lim_phi)

        scale = [1, 2, 3, 4, 5, 6, 7, 8, 9,
                 10, 20, 30, 40, 50, 60, 70, 80, 90,
                 100, 200, 300, 400, 500, 600, 700, 800, 900,
                 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000,
                 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000,
                 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000,
                 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000,
                 10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000,
                 100000000]

        scale_log = [log10(i) for i in scale]
        scale_log_zoom = [i * fzoom for i in scale_log]

        scale_phi = [i * fzoom_phi for i in range(0, lim_phi, step_phi)]


        with self.canvas:
            Color(rgba=(0., 0., 0., 1.))
            Line(points=[x0, y0, x0, yf], width=border)
            Line(points=[x0, y0, xf, y0], width=border)
            Line(points=[x0, yf, xf, yf], width=border)
            Line(points=[xf, y0, xf, yf], width=border)

            Line(points=[x0_2, y0, x0_2, yf], width=border)
            Line(points=[x0_2, y0, xf_2, y0], width=border)
            Line(points=[x0_2, yf, xf_2, yf], width=border)
            Line(points=[xf_2, y0, xf_2, yf], width=border)

            c = 0
            for i in scale_log_zoom:
                if scale[c] > limx:
                    continue
                else:
                    Line(points=[i + x0, y0, i + x0, y0 - sp(5)])
                    Line(points=[i + x0_2, y0, i + x0_2, y0 - sp(5)])
                    c += 1

            for i in scale_phi:
                Line(points=[x0, i + y0, x0 - sp(5), i + y0])
                Line(points=[xf, i + y0, xf + sp(5), i + y0])
                Line(points=[x0_2, i + y0, x0_2 - sp(5), i + y0])
                Line(points=[xf_2, i + y0, xf_2 + sp(5), i + y0])





        for i in dec_x:

            if dec_x[0] < 0:
                pos = -dec_x[0]

            lb = Label()
            lb.color = [0,0,0,1]
            lb.markup = True
            lb.text = '10' + '[sup][size=10]' + str(i) + '[/size][/sup]'
            lb.size_hint = None, None
            lb.font_size = '17sp'
            lb.height = sp(30)
            lb.width = sp(30)

            x = int((x0 - lb.width/2) + ((i + pos) * fzoom))
            lb.pos = x, y0 - sp(30)
            self.add_widget(lb)

            lb_2 = Label()
            lb_2.color = [0, 0, 0, 1]
            lb_2.markup = True
            lb_2.text = '10' + '[sup][size=10]' + str(i) + '[/size][/sup]'
            lb_2.size_hint = None, None
            lb_2.font_size = '17sp'
            lb_2.height = sp(30)
            lb_2.width = sp(30)

            x = int((x0_2 - lb_2.width / 2) + ((i + pos) * fzoom))
            lb_2.pos = x, y0 - sp(30)
            self.add_widget(lb_2)







        for i in range(0, lim_phi + step_phi, step_phi):
            lb_phi = Label()
            lb_phi.color = [0., 0., 0., 1.]
            lb_phi.markup = True
            lb_phi.text = str(i)

            lb_phi.font_size = '17sp'
            lb_phi.size_hint = None, None
            lb_phi.height = sp(17)
            lb_phi.width = sp(30)
            lb_phi.text_size = lb_phi.size
            lb_phi.halign = 'left'


            y = int((y0 - lb_phi.height/2) + ((i) * fzoom_phi))
            lb_phi.pos = xf + sp(10), y
            self.add_widget(lb_phi)

            lb_phi_2 = Label()
            lb_phi_2.color = [0., 0., 0., 1.]
            lb_phi_2.markup = True
            lb_phi_2.text = str(i)

            lb_phi_2.font_size = '17sp'
            lb_phi_2.size_hint = None, None
            lb_phi_2.height = sp(17)
            lb_phi_2.width = sp(30)
            lb_phi_2.text_size = lb_phi.size
            lb_phi_2.halign = 'left'

            y = int((y0 - lb_phi_2.height / 2) + ((i) * fzoom_phi))
            lb_phi_2.pos = xf_2 + sp(10), y
            self.add_widget(lb_phi_2)


        lb_rho_ohm_meter = LabelRot()
        lb_rho_ohm_meter.size_hint = None, None
        lb_rho_ohm_meter.height = sp(100)
        lb_rho_ohm_meter.width = sp(25)
        lb_rho_ohm_meter.markup = True
        lb_rho_ohm_meter.italic = True
        lb_rho_ohm_meter.text = 'φ (Ω.m)'
        lb_rho_ohm_meter.font_size = '18sp'
        lb_rho_ohm_meter.color = [0., 0., 0., 1.]
        lb_rho_ohm_meter.center_x = x0 - sp(50)
        lb_rho_ohm_meter.center_y = int(y0 + (height/3) / 2)

        self.add_widget(lb_rho_ohm_meter)


size_point = sp(6), sp(6)

class Points(Button):


    size_hint = None, None
    background_normal = ' '
    cor_active = [1., 0, 0, 1.]
    cor_no_active = [0., 0., 0., 1.]
    border = [0, 0, 0, 0]


    def __init__(self, **kwargs):
        super(Points, self).__init__(**kwargs)
        self.size = size_point
        self.active = False
        self.background_color = self.cor_no_active

    def on_press(self):
        self.active = not self.active
        if self.active:
            self.background_color = self.cor_active
        else:
            self.background_color = self.cor_no_active



class PlotPeriods(FloatLayout):

    def __init__(self, points_xy, points_yx, model_xy, model_yx, **kwargs):
        super(PlotPeriods, self).__init__(**kwargs)

        self.points_xy = points_xy
        self.points_yx = points_yx

        self.model_xy = model_xy
        self.model_yx = model_yx


    def plot(self):
        self.plot_rho()
        self.plot_phi()

    def plot_model(self):

        lay_model = FloatLayout()
        lay_model.size = self.size
        lay_model.pos = self.pos


        self.canvas.before.clear()
        height = self.parent.height - sp(100)
        inter = self.parent.width * .05 + sp(40)

        y0 = self.parent.y + height / 3 + sp(40)

        x0 = self.parent.x + sp(70)
        xf = x0 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        x0_2 = xf + inter

        border_model = 1.02


        limy = 1000000

        fzoom = (2 * height / 3) / (log10(limy))


        model_xy_rho = []
        model_yx_rho = []

        y0_phi = self.parent.y + sp(40)
        x0_2_phi = xf + inter
        lim_phi = 180
        fzoom_phi = ((height / 3) / lim_phi)

        model_xy_phi = []
        model_yx_phi = []




        for period in self.model_xy:
            model_xy_rho.append(x0 + (log10(1/period['T']) + 4) * fzoom)
            model_xy_rho.append(y0 + (log10(period['Mrho']) + 1) * fzoom)

            model_xy_phi.append(x0 + (log10(1/period['T']) + 4) * fzoom)
            model_xy_phi.append(y0_phi + period['Mphi'] * fzoom_phi)

        for period in self.model_yx:
            model_yx_rho.append(x0_2 + (log10(1/period['T']) + 4) * fzoom)
            model_yx_rho.append(y0 + (log10(period['Mrho']) + 1) * fzoom)

            model_yx_phi.append(x0_2 + (log10(1 / period['T']) + 4) * fzoom)
            model_yx_phi.append(y0_phi + period['Mphi'] * fzoom_phi)





        with self.canvas.before:
            Color(rgba=(0., 0., 1., 1.))
            Line(points=model_xy_rho, width=border_model)
            Line(points=model_yx_rho, width=border_model)

            Line(points=model_xy_phi, width=border_model)
            Line(points=model_yx_phi, width=border_model)

    def plot_rho(self):

        self.clear_widgets()
        self.canvas.clear()

        height = self.parent.height - sp(100)
        inter = self.parent.width * .05 + sp(40)

        y0 = self.parent.y + height / 3 + sp(40)
        yf = y0 + 2 * height / 3

        x0 = self.parent.x + sp(70)
        xf = x0 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        x0_2 = xf + inter
        xf_2 = x0_2 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        border_model = sp(1.05)

        limx = 100000000
        limy = 1000000

        fzoom = (2 * height / 3) / (log10(limy))

        border_error = sp(1.05)

        with self.canvas:
            Color(rgba=(0., 0., 0., 1.))

            for period in self.points_xy:

                dz = 0.434*(period['Erho']/period['rho'])


                yi_erro = y0 + (fzoom * (log10(period['rho']) - dz + 1))
                yf_erro = y0 + (fzoom * (log10(period['rho']) + dz + 1))



                x = x0 + (log10(period['T']) + 4) * fzoom

                print('------')
                print(log10(period['rho']))
                print(log10(period['Erho']))


                if yi_erro < y0:
                    yi_erro = y0

                if yf_erro > yf:
                    yf_erro = yf


                bar = [x, yi_erro, x, yf_erro]
                rho = y0 + (log10(period['rho']) + 1) * fzoom
                if rho > y0 and rho < yf:
                    Line(points=bar, width=border_error)


            for period in self.points_yx:

                dz = 0.434*(period['Erho']/period['rho'])


                yi_erro = y0 + (fzoom * (log10(period['rho']) - dz + 1))
                yf_erro = y0 + (fzoom * (log10(period['rho']) + dz + 1))



                x = x0_2 + (log10(period['T']) + 4) * fzoom

                print('------')
                print(log10(period['rho']))
                print(log10(period['Erho']))


                if yi_erro < y0:
                    yi_erro = y0

                if yf_erro > yf:
                    yf_erro = yf


                bar = [x, yi_erro, x, yf_erro]
                rho = y0 + (log10(period['rho']) + 1) * fzoom
                if rho > y0 and rho < yf:
                    Line(points=bar, width=border_error)









        self.points_rho_xy = []

        for period in self.points_xy:
            x = x0 + (log10(period['T']) + 4) * fzoom
            y = y0 + (log10(period['rho']) + 1) * fzoom

            bt = Points()

            x = x - bt.width / 2
            y = y - bt.height / 2

            bt.pos = x, y
            if period['Srho']:
                bt.on_press()
            self.points_rho_xy.append(bt)

            if bt.x > x0 and bt.x < xf and bt.y > y0 and bt.y < yf:
                self.add_widget(bt)



        self.points_rho_yx = []

        for period in self.points_yx:
            x = x0_2 + (log10(period['T']) + 4) * fzoom
            y = y0 + (log10(period['rho']) + 1) * fzoom

            bt = Points()

            x = x - bt.width / 2
            y = y - bt.height / 2

            bt.pos = x, y
            if period['Srho']:
                bt.on_press()
            self.points_rho_yx.append(bt)

            if bt.x > x0_2 and bt.x < xf_2 and bt.y > y0 and bt.y < yf:
                self.add_widget(bt)

    def plot_phi(self):

        height = self.parent.height - sp(100)
        inter = self.parent.width * .05 + sp(40)

        y0 = self.parent.y + sp(40)
        yf = y0 + height / 3

        x0 = self.parent.x + sp(70)
        xf = x0 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        x0_2 = xf + inter
        xf_2 = x0_2 + 2 * height / 3 + 2 * (2 * height / 3) / 6

        border = 1.05

        limx = 100000000
        limy = 1000000

        lim_phi = 180

        fzoom = (2 * height / 3) / (log10(limy))
        fzoom_phi = ((height / 3) / lim_phi)


        # Error Bar
        border_error = sp(1.05)



        with self.canvas:
            Color(rgba=(0., 0., 0., 1.))

            for period in self.points_xy:

                yi_erro = y0 + (fzoom_phi * (period['phi'] - period['Ephi']))
                yf_erro = y0 + (fzoom_phi * (period['phi'] + period['Ephi']))

                x = x0 + (log10(period['T']) + 4) * fzoom

                if yi_erro < y0:
                    yi_erro = y0

                if yf_erro > yf:
                    yf_erro = yf


                bar = [x, yi_erro, x, yf_erro]
                phi = y0 + period['phi'] * fzoom_phi
                if phi > y0 and phi < yf:
                    Line(points=bar, width=border_error)

        with self.canvas:
            Color(rgba=(0., 0., 0., 1.))

            for period in self.points_yx:

                yi_erro = y0 + (fzoom_phi * (period['phi'] - period['Ephi']))
                yf_erro = y0 + (fzoom_phi * (period['phi'] + period['Ephi']))

                x = x0_2 + (log10(period['T']) + 4) * fzoom

                if yi_erro < y0:
                    yi_erro = y0

                if yf_erro > yf:
                    yf_erro = yf



                bar = [x, yi_erro,x, yf_erro]

                phi = y0 + period['phi'] *fzoom_phi
                if phi > y0 and phi < yf:
                    Line(points=bar, width=border_error)






        self.points_phi_xy = []

        for period in self.points_xy:
            x = x0 + (log10(period['T']) + 4) * fzoom
            y = y0 + period['phi'] * fzoom_phi

            bt = Points()

            x = x - bt.width/2
            y = y - bt.height/2

            bt.pos = x, y
            if period['Sphi']:
                bt.on_press()
            self.points_phi_xy.append(bt)
            if bt.x > x0 and bt.x < xf and bt.y > y0 and bt.y < yf:
                self.add_widget(bt)


        self.points_phi_yx = []

        for period in self.points_yx:
            x = x0_2 + (log10(period['T']) + 4) * fzoom
            y = y0 + period['phi'] * fzoom_phi

            bt = Points()

            x = x - bt.width / 2
            y = y - bt.height / 2

            bt.pos = x, y
            if period['Sphi']:
                bt.on_press()
            self.points_phi_yx.append(bt)
            if bt.x > x0_2 and bt.x < xf_2 and bt.y > y0 and bt.y < yf:
                self.add_widget(bt)









class Graphic(Screen):



    def init_rho(self, parameter):
        WindowBase.on_key_down = on_keyboard_none
        self.site = parameter['Zfile'].replace('.dat', '')
        self.check_select_box = False
        self.ids.bt_data.on_press()
        self.rhoplus = Rhoplus(self.site,
                          parameter['Zorigin'],
                          parameter['c'],
                          parameter['s'],
                          parameter['Trho'],
                          parameter['rot'],
                          parameter['ef'])

        os.chdir(self.rhoplus.zorigin)
        self.draw_graphic = DrawGraphicPlot(self.rhoplus.site)
        self.ids.draw.add_widget(self.draw_graphic)
        WindowBase.on_maximize = self.maximize_or_restore
        WindowBase.on_restore = self.maximize_or_restore


        if self.rhoplus.check_NM() == (True, True):
            self.pop = Popup(title='The File: ' + parameter['Zorigin'].replace('.dat', '') + '/xy_' + self.site + '_NM or /yx_' + self.site + ' already exists:\n'
                                'Do you want to replace it?')


            bt_ok = ButtonRHO(text='Yes')
            bt_ok.height = '20sp'
            bt_ok.on_press = self.make_NM
            bt_ok.size_hint_x = 1.
            bt_no = ButtonRHO(text='No')
            bt_no.height = '20sp'
            bt_no.size_hint_x = 1.
            bt_no.on_press = self.close_pop
            box = BoxLayout()
            box.spacing = '10sp'
            box.add_widget(bt_ok)
            box.add_widget(bt_no)
            self.pop.size_hint = None, None
            self.pop.size = '300sp', '150sp'
            self.pop.content = box
            self.pop.auto_dismiss = False
            self.pop.open()

        else:
            WindowBase.on_key_down = self.press_enter_made_NM_files
            self.pop = Popup(title='Made the NM files')
            bt_ok = ButtonRHO(text='OK')
            bt_ok.height = '20sp'
            bt_ok.on_press = self.make_NM
            bt_ok.size_hint_x = 1.
            box = BoxLayout()
            box.spacing = '10sp'
            box.add_widget(bt_ok)
            self.pop.size_hint = None, None
            self.pop.size = '300sp', '100sp'
            self.pop.content = box
            self.pop.auto_dismiss = False
            self.pop.open()

    def press_enter_made_NM_files(self, key, scancode, *args):
        if scancode == 40:
            WindowBase.on_key_down = self.on_press_shortcuts
            self.make_NM()

    def on_press_shortcuts(self, key, scancode, *args):
        print(scancode)

        # press 'enter'
        if scancode == 40:
            self.run_rhoplus()

        # press 's'
        if scancode == 22:
            self.select(self.ids.bt_box)


    def make_NM(self):
        Window.set_system_cursor('wait')
        self.rhoplus.make_NM()
        self.rhoplus.run()
        self.pop.dismiss()
        self.draw_graphic.draw_grafic()
        self.import_read_NM()
        self.plot()
        WindowBase.on_key_down = self.on_press_shortcuts
        Window.set_system_cursor('arrow')


    def close_pop(self):
        Window.set_system_cursor('wait')
        self.rhoplus.run()
        self.pop.dismiss()
        self.rhoplus.read_NM()
        self.draw_graphic.draw_grafic()
        self.import_read_NM()
        self.plot()
        WindowBase.on_key_down = self.on_press_shortcuts
        Window.set_system_cursor('arrow')


    def update_draw_rho(self):
        self.draw_graphic.draw_grafic()
        self.update_NM_rhoplus()
        self.points.plot()
        self.plot_model()


    def run_rhoplus(self):
        Window.set_system_cursor('wait')
        if self.check_select_box:
            self.select(self.ids.bt_box)

        self.update_NM_rhoplus()
        self.rhoplus.save_NM()

        if self.check_select_none_periods():
            self.rhoplus.run()
            self.draw_graphic.draw_grafic()
            self.plot()
            Window.set_system_cursor('arrow')

        else:
            Window.set_system_cursor('arrow')
            self.pop_select_period()

    def check_select_none_periods(self):

        select_rho_xy = False
        select_phi_xy = False
        select_rho_yx = False
        select_phi_yx = False

        for period in self.rhoplus.xy_NM:
            if period['Srho']:
                select_rho_xy = True
            if period['Sphi']:
                select_phi_xy = True

        for period in self.rhoplus.yx_NM:
            if period['Srho']:
                select_rho_yx = True
            if period['Sphi']:
                select_phi_yx = True


        if select_rho_xy and select_phi_xy and \
               select_rho_yx and select_phi_yx:
            return True
        else:
            if not select_rho_xy:
                self.no_select_period = 'Rho XY'
            elif not select_phi_xy:
                self.no_select_period = 'Phi XY'
            elif not select_rho_yx:
                self.no_select_period = 'Rho YX'
            elif not select_phi_yx:
                self.no_select_period = 'Phi YX'
            else:
                self.no_select_period = ''
            return False

    def pop_select_period(self):
        pop = Popup(title='Select a Period: ' + self.no_select_period)
        pop.size_hint = None, None
        pop.height = '70sp'
        pop.width = '200sp'
        pop.open()

    def import_read_NM(self):
        self.rhoplus.read_NM()
        self.rhoplus.read_rsp()

        self.points = PlotPeriods(self.rhoplus.xy_NM, self.rhoplus.yx_NM, \
                                  self.rhoplus.xy_rsp, self.rhoplus.yx_rsp)
        self.ids.plot.add_widget(self.points)

    def plot(self):
        self.points.plot()
        self.plot_model()

    def plot_model(self):
        self.rhoplus.read_rsp()
        self.points.model_xy = self.rhoplus.xy_rsp
        self.points.model_yx = self.rhoplus.yx_rsp
        self.points.plot_model()

    def update_NM_rhoplus(self):

        i = 0
        for bt in self.points.points_rho_xy:
            if bt.active:
                self.rhoplus.xy_NM[i]['Srho'] = True
                i += 1
            else:
                self.rhoplus.xy_NM[i]['Srho'] = False
                i += 1

        i = 0
        for bt in self.points.points_rho_yx:
            if bt.active:
                self.rhoplus.yx_NM[i]['Srho'] = True
                i += 1
            else:
                self.rhoplus.yx_NM[i]['Srho'] = False
                i += 1

        i = 0
        for bt in self.points.points_phi_xy:
            if bt.active:
                self.rhoplus.xy_NM[i]['Sphi'] = True
                i += 1
            else:
                self.rhoplus.xy_NM[i]['Sphi'] = False
                i += 1

        i = 0
        for bt in self.points.points_phi_yx:
            if bt.active:
                self.rhoplus.yx_NM[i]['Sphi'] = True
                i += 1
            else:
                self.rhoplus.yx_NM[i]['Sphi'] = False
                i += 1

    def change_size_point(self, value, *args):

        # value is string

        global size_point

        try:
            value = float(value)
            size_point = sp(value), sp(value)
            self.update_draw_rho()
            self.ids.text_change.foreground_color = (0., 0, 0, 1.)


        except ValueError:
            self.ids.text_change.foreground_color = (1.,0,0,1.)

    def change_site(self):
        self.ids.draw.clear_widgets()
        app.current = 'menu'

    def export_image(self):
        self.pop_export_figure = Popup()
        self.pop_export_figure.size_hint = None, None
        self.pop_export_figure.size = sp(600), sp(600)
        self.pop_export_figure.title = 'Export Figure'
        self.pop_export_layout = PopUPExportFigure(site=self.site)
        self.pop_export_figure.content = self.pop_export_layout
        self.pop_export_figure.open()

    def open_merge_rsp_jones(self):

        self.pop_merge = Popup()
        self.pop_merge.size_hint = None, None
        self.pop_merge.size = sp(600), sp(600)
        self.pop_merge.title = 'Merge rsp file and dat'
        self.pop_merge_layout = PopUPMerge(site=self.site, site_origin=self.rhoplus.zorigin)
        self.pop_merge.content = self.pop_merge_layout
        self.pop_merge.open()

    def select(self, bt):

        if not bt.press:
            bt.background_color = [1., 0., 0., 1.]
            bt.press = True
            self.check_select_box = True
            self.lay_select = BoxSelectLayout(self.ids.plot, self.points)
            self.ids.plot.add_widget(self.lay_select)

        else:
            bt.background_color = [0.00784, 0.35686, 0.90980, 1.]
            bt.press = False
            self.check_select_box = False
            self.ids.plot.remove_widget(self.lay_select)
            Clock.unschedule(self.lay_select.mouse_in_grafic)
            Window.set_system_cursor('arrow')

    def merge_rsp_jones(self):
        pass

    def maximize_or_restore(self, *args):
        Window.set_system_cursor('wait')
        self.update_draw_rho()
        Window.set_system_cursor('arrow')



app = ScreenManager()
app.add_widget(MenuInit(name='menu'))
graphic = Graphic(name='graphic')
app.add_widget(graphic)





class RhoplusGUI(App):


    def build(self):

        return app

if __name__ == '__main__':
    window = RhoplusGUI()
    print(PWD_install + '/image/icon.png')

    window.icon = PWD_install + 'image/icon.png'

    Window.size = 1030, 650
    # try:
    window.run()
    # except Exception:
    #     print('Error in running kivy')
    #     install.install_python()

    #Install().install_python()

    #os.chdir('ufb101a')
    #plot = PlotMatplotLib('ufb101a')
